#!/bin/bash
# parts are pulled out of https://sh.rustup.rs/
#check if the rootfs is readonly, if not remount
LIB_DIR=$(dirname "${BASH_SOURCE[0]}")
load_lib() {
	lib=$1;
	if [[ -f "$PKG_PREFIX/lib/$lib" ]]; then
		source "$PKG_PREFIX/lib/$lib";
	else
		source "$LIB_DIR/$lib";
	fi
}
urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }
root_check() {
	[ "$EUID" = "0" ] && {
	    err "Don't run me as root, please"
	}
}
checkro() {
    if [[ $(rorw) = "rw" ]]; then
        echo "remounting rootfs as readonly....";
        remount || err "remounting failed! crackle works best on a readonly rootfs";
    fi
}

install_rorw() {
   mkdir -p ~/.local/bin
   cp $SCRP_DIR/rorw ~/.local/bin
   cp $SCRP_DIR/remount ~/.local/bin
   checkpath;
}
checkpath() {
    if ! check_cmd rorw;
        then
	   if [[ ! -f ~/.local/bin/rorw ]]; then install_rorw; fi
           echo please add ~/.local/bin to your PATH;
    else
           checkro;
    fi
}
download_crackle() {
	say "downloading latest version"
	wget -q https://github.com/tuxecure/crackle/releases/latest/download/crackle.zip -O $HOME/Downloads/crackle.zip
}

unzip_crackle() {
	say "unpacking..."
	unzip -q $HOME/Downloads/crackle.zip -d $HOME/crackle
}

upgrade_crackle() {
	[[ ! -f $HOME/Downloads/crackle.zip ]] && download_crackle;
	[[ ! -d $HOME/crackle ]] && unzip_crackle;
	transistion_crackle
	[[  $(basename $SCRP_DIR) = "bin" ]] || $HOME/crackle/crackle setup
	say "cleaning up..."
	rm $HOME/Downloads/crackle.zip;
	say "done!"
	exit 0;

}

# remove lines, files and folders that crackle added/installed once upon a time
transistion_crackle() {
	[[ -f "$PKG_PATH/bin/awkopts" ]] && rm $PKG_PATH/bin/awkopts;
	[[ -f "$PKG_PREFIX/bin/awkopts" ]] && rm $PKG_PREFIX/bin/awkopts;
	[[ -f "$PKG_PREFIX/lib/loginfo" ]] && rm $PKG_PREFIX/lib/loginfo;
	[ -d $PKG_PATH/lib ] && rm -r $PKG_PATH/lib;
	[[ -d "$APTCACHE/lists" ]] && rm -r "$APTCACHE/lists";
	[[ -f "$APTCONFIG/crackle_completion" ]] && rm "$APTCONFIG/crackle_completion";
	[[ -d "$PKG_PATH/bin/scripts" ]] && rm -r "$PKG_PATH/bin/scripts";
	[ -f $HOME/.bash_completion ] && sed -i '/crackle_conmpletion/d' $HOME/.bash_completion
}

# check is a command exists
check_cmd() {
    command -v "$1" > /dev/null 2>&1
}

say() {
    printf '%s\n' "$1"
}

# error out
err() {
    say "Crackle: $1" >&2
    exit 100
}

# say something and quit the script
stat() {
    say "$1" >&2
    exit 0
}

# check if the files differ, if yes overwrite the old version
upd() {
    lib=$(basename $1)
    if [[ ! -f "$2/$lib" && -d "$2" ]]; then
	say "installing $lib..." >&2
	cp $1 $2
    elif ! diff -q $1 $2; then
	say "updating $lib..." >&2
	cp $1 $2
    fi
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing
# command.
ensure() {
    if ! "$@"; then exit 1; fi
}
