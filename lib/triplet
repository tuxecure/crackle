#!/usr/bin/env bash
# parts are pulled out of https://sh.rustup.rs/
#check if the rootfs is readonly, if not remount
LIB_DIR=$(dirname "${BASH_SOURCE[0]}")
load_lib() {
	lib=$1;
	if [[ -f "$PKG_PREFIX/lib/$lib" ]]; then
		source "$PKG_PREFIX/lib/$lib";
	else
		source "$LIB_DIR/$lib";
	fi
}
urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }
root_check() {
	[ "$EUID" = "0" ] && {
	    err "Don't run me as root, please"
	}
}
rm_rorw(){
   rm $PKG_PREFIX/bin/rorw
   rm $PKG_PREFIX/bin/arch_triplet;
   rm $PKG_PREFIX/bin/remount
    err "remounting failed! crackle works best on a readonly rootfs";
}

check_release(){
    if [[ ! $(lsb_release -cs) = "$1" ]]; then
        err "$(lsb_release -cs) is not supported";
    fi
}
checkro() {
    if [[ $(rorw) = "rw" && $(lsb_release -cs) = "focal" ]]; then
        echo "remounting rootfs as readonly....";
        remount || rm_rorw;
    elif [[ ! $(lsb_release -cs) = "focal" ]]; then
        err "$(lsb_release -cs) is not supported";
    fi
}

install_rorw() {
   mkdir -p $PKG_PREFIX/bin
   upd $SCRP_DIR/rorw $PKG_PREFIX/bin;
   upd $SCRP_DIR/arch_triplet $PKG_PREFIX/bin;
   upd $SCRP_DIR/remount $PKG_PREFIX/bin;
}
install_bins() {
   mkdir -p $PKG_PREFIX/bin $CRACKLECMP
   upd $SCRP_DIR/_crackleconf $PKG_PREFIX/bin;
   upd $SCRP_DIR/crackle $PKG_PREFIX/bin
   upd $SCRP_DIR/desktop_trunc $PKG_PREFIX/bin
   upd $SCRP_DIR/_crackleopts $PKG_PREFIX/bin;
   upd $SCRP_DIR/share/bash-completion/completions/crackle $CRACKLECMP;
}
install_libs() {
   mkdir -p $PKG_PREFIX/lib
   upd $SCRP_DIR/lib/triplet $PKG_PREFIX/lib
   upd $SCRP_DIR/lib/pkgfunc $PKG_PREFIX/lib
   upd $SCRP_DIR/lib/clickfunc $PKG_PREFIX/lib
   upd $SCRP_DIR/lib/linkfunc $PKG_PREFIX/lib
}
checkpath() {
    if ! check_cmd rorw;
        then
	   if [[ ! -f ~/.local/bin/rorw ]]; then install_rorw; fi
           if ! check_cmd rorw; then echo please add ~/.local/bin to your PATH; fi
           checkro;
    else
           checkro;
    fi
}

sudo_run() {
        say "this action requires sudo access"
	set -x
	sudo -k $1
	set +x
}
download_crackle() {
	say "downloading latest version"
	wget -q https://github.com/tuxecure/crackle/releases/latest/download/crackle.zip -O $HOME/Downloads/crackle.zip
}

unzip_crackle() {
        [[ -d $HOME/crackle ]] && rm -r $HOME/crackle;
	say "unpacking..."
	unzip -q $HOME/Downloads/crackle.zip -d $HOME/crackle
}

upgrade_crackle() {
	[[ ! -f $HOME/Downloads/crackle.zip ]] && download_crackle;
	[[ ! -d $HOME/crackle ]] && unzip_crackle;
	$HOME/crackle/crackle setup
	say "cleaning up..."
	rm -r $HOME/crackle;
	rm $HOME/Downloads/crackle.zip;
	say "done!"
	exit 0;
}

# check is a command exists
check_cmd() {
    command -v "$1" > /dev/null 2>&1
}

# error out
err() {
    say "Crackle: $1" >&2
    exit 100
}

# say something and quit the script
stat() {
    say "$1" >&2
    exit 0
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing
# command.
ensure() {
    if ! "$@"; then exit 1; fi
}
