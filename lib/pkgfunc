#!/usr/bin/env bash
function get_pkg_info () {
	pkg="$(basename "$1")";
	pkgname="${pkg%%_*}";
	pkgversion="${pkg%_*}";
	pkgversion="${pkgversion#*_}";
	pkgversion="$(urldecode $pkgversion)";
}

function tarball_install () {
	wget "${TARBALL}" -O - | tar -xjvf - -C "${dir}";
	pkg_install;
}

function pkg_install () {
	PKGS_DIR=${PKG_PATH}/${pkgname};
	echo "${pkgversion}" > "${PKGS_DIR}/${pkgname}.version";
	link_bin;
	link_lib;
	if [ -f "${PKG_PREFIX}/lib/crackle/${pkgname}" ]; then
		source "${PKG_PREFIX}/lib/crackle/${pkgname}";
		install_${pkgname};
	fi
	fetch_desktop ${pkgname}
        link_icons;
	link_bash-completion;
}

function pkg_crack () {
	PKGS_DIR=${PKG_PATH}/${pkgname}
	say "Unpacking ${pkgname} (${pkgversion})"
	[[ ${dir} = ${PKG_PATH} ]] && dir=${PKG_PATH}/${pkgname}
        dpkg-deb -x "${package}" "${dir}";
	[[ "${dir}" = "${PKG_PATH}/${pkgname}" ]] && dir=${PKG_PATH}
}

function pkg_arch() {
	if [[ -z "$CI" ]]; then
		echo ${PKG[@]};
	else
		for pkg in "${PKG[@]}"
		do
			if [[ "${pkg}" == *":all" ]]; then
				dpkgs+="${pkg} "
			else
				dpkgs+="${pkg}":"${ARCH} "
			fi
		done
		echo ${dpkgs};
	fi
}

function pkgstatus(){
	[[ -d "$PKGS_DIR" && "$operation" = "install" ]] && {
	say "Fetching installed version...";
	installed=$(cat $PKGS_DIR/$1.version);
	say "Fetching candidate version...";
	candidate=$($APT_CACHE policy $1|awk '/Candidate/{print $2}');
	say "Comparing...";
	[[ "$installed" = "$candidate" ]] && stat "$1 is already the newest version \($installed\)"; }
	pkgstatus=$($APT_CACHE policy $1|awk '/Installed/{print $2}');
	[ ! $pkgstatus = "(none)" ] && stat "Apt: $1 is already the newest version \($pkgstatus\)";
}

function pkgsetup(){
    say "configuring crackle";
    [[ -d "$DPKGSTATE" ]] || {
        mkdir -p "$DPKGSTATE";
        cp /var/lib/dpkg/status $DPKGSTATE/status;
    }
    [[ -d "$APTCACHE" ]] || mkdir -p "$APTCACHE";
    [[ -d "$APTSTATE" ]] || mkdir -p "$APTSTATE";
    [[ -d "$APTCONFIG" ]] || {
        mkdir -p $APTCONFIG/sources.list.d $APTCONFIG/preferences.d $APTCONFIG/trusted.gpg.d;
        ln -s /etc/apt/sources.list $APTCONFIG;
        [[ -n "$(ls /etc/apt/trusted.gpg.d)" ]] && ln -s /etc/apt/trusted.gpg.d/* $APTCONFIG/trusted.gpg.d/;
    }
    [ -d "$APTSTATE/lists" ] || {
        say "Fetching package lists...";
        ensure "$SCRP_DIR"/crackle update
    }
}

function fetch_desktop() {
	while read desktop
	do
		desktopname=$(basename $desktop)
	     	${SCRP_DIR}/desktop_trunc $desktop > ${PKG_PREFIX}/share/applications/crackle.${desktopname}
	     	echo "X-Ubuntu-Touch=true" >>  ${PKG_PREFIX}/share/applications/crackle.${desktopname}
        done < <(find $PKG_PATH/$1 -name *.desktop)
}
