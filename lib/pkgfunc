#!/usr/bin/env bash
function get_pkg_info () {
	pkg="$(basename "$1")";
	pkgname="${pkg%%_*}";
	pkgversion="${pkg%_*}";
	pkgversion="${pkgversion#*_}";
	pkgversion="$(urldecode $pkgversion)";
}

function log_pkg_info () {
	[ -d "$PKGS_DIR/$pkgname" ] || mkdir "$PKGS_DIR/$pkgname";
	dpkg -c "$1" | awk '{print $6}' > "$PKGS_DIR/$pkgname/pkgs.list";
	echo "$pkgversion" > "$PKGS_DIR/$pkgname/pkgs.version";
}

function tarball_install () {
	wget "${TARBALL}" -O - | tar -xjvf - -C "${dir}";
	pkg_install;
}

function pkg_install () {
	log_pkg_info "${package}"
	if [ -f "${PKG_PREFIX}/lib/crackle/${pkgname}" ]; then
		source "${PKG_PREFIX}/lib/crackle/${pkgname}";
		install_${pkgname};
	fi
	fetch_desktop ${PKG_PATH}/usr/share/applications/${pkgname}.desktop ${PKG_PREFIX}/share/applications/crackle.${pkgname}.desktop
	if [[ ! -e "${PKG_PREFIX}/share/icons" ]]; then link_iconsdir; fi
	link_bin;
	link_lib;
	link_bash-completion;
}

function pkg_crack () {
	say "Unpacking ${pkgname} (${pkgversion})"
        dpkg-deb -x "${package}" "${dir}";
}

function pkg_arch() {
	if [[ -z "$CI" ]]; then
		echo ${PKG[@]};
	else
		for pkg in "${PKG[@]}"
		do
			if [[ "${pkg}" == *":all" ]]; then
				dpkgs+="${pkg} "
			else
				dpkgs+="${pkg}":"${ARCH} "
			fi
		done
		echo ${dpkgs};
	fi
}

function rmpkgtree() {
	[ -d "$PKGS_DIR/$1" ] && {
	say "Removing $1";
	readarray -t files < <(cat "$PKGS_DIR/$1/pkgs.list");
	for file in "${files[@]}"
	do
		[ -f "$PKG_PATH/$file" ] && rm "$PKG_PATH/$file";
	done
	find $PKG_PATH -empty -type d -delete;
	find "$PKG_PATH" -xtype l -exec rm {} +;
	rm -r "${PKGS_DIR:?}/$1"; }
}

function fetch_rdependencies(){
	readarray -t packages < <($APT_CACHE rdepends "$dependency" | awk '/Depends/{next}/$/{print $1}'|uniq);
	for package in "${packages[@]}"
	do
		[ -d "$PKGS_DIR/$package" ] || packages=("${packages[@]/$package}");
	done;
}

function pkgstatus(){
	[[ -d "$PKGS_DIR/$PKG" && "$operation" = "install" ]] && {
	say "Fetching installed version...";
	installed=$(cat $PKGS_DIR/$PKG/pkgs.version);
	say "Fetching candidate version...";
	candidate=$($APT_CACHE policy $PKG|awk '/Candidate/{print $2}');
	say "Comparing...";
	[[ "$installed" = "$candidate" ]] && stat "$PKG is already the newest version \($installed\)"; }
	pkgstatus=$($APT_CACHE policy $1|awk '/Installed/{print $2}');
	[ ! $pkgstatus = "(none)" ] && stat "Apt: $1 is already the newest version \($pkgstatus\)";
}

function pkgsetup(){
    [[ -d "$APTCACHE" ]] || mkdir -p "$APTCACHE";
    [[ -d "$APTSTATE" ]] || mkdir -p "$APTSTATE";
    [[ -d "$APTCONFIG" ]] || {
        mkdir -p $APTCONFIG/sources.list.d $APTCONFIG/preferences.d $APTCONFIG/trusted.gpg.d;
        ln -s /etc/apt/sources.list $APTCONFIG;
        ln -s /etc/apt/trusted.gpg $APTCONFIG;
        [[ -n "$(ls /etc/apt/trusted.gpg.d)" ]] && ln -s /etc/apt/trusted.gpg.d/* $APTCONFIG/trusted.gpg.d/;
    }
    [ -d "$APTSTATE/lists" ] || {
        say "Fetching package lists...";
        ensure "$SCRP_DIR"/crackle update
    }
}

function fetch_desktop() {
	if [[ -f "$1" ]]; then
		${SCRP_DIR}/desktop_trunc $1 > $2
		echo "X-Ubuntu-Touch=true" >> $2
		# if mirx flag
		echo "X-Ubuntu-XMir-Enable=true" >> $2
	fi
}

function link_iconsdir() {
	if [[ -d "${PKG_PATH}/usr/share/icons" ]]; then say "linking icons directory";ln -s ${PKG_PATH}/usr/share/icons ${PKG_PREFIX}/share;fi
}
